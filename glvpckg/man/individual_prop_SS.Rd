% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/UntitledR.R
\name{individual_prop_SS}
\alias{individual_prop_SS}
\title{Individual Steady State Search by Proportion of Change}
\usage{
individual_prop_SS(uniqueID, output, tolerance, wd)
}
\arguments{
\item{uniqueID}{Character: A unique identifier for the simulation run, typically generated using \code{forge_id}.}

\item{output}{Matrix: Simulation results where rows represent species and columns represent time steps. Each element in the matrix represents the abundance of a species at a given time step.}

\item{tolerance}{Numeric: Tolerance value for determining the steady state. The tolerance represents the proportional change between successive generations, calculated using \eqn{\log(t / (t+1))}.}

\item{wd}{Character: The working directory where the results will be saved. The directory must exist prior to running the function.}
}
\value{
A numeric vector indicating the generation where each species reached the steady state. 
If a species did not reach a steady state, the corresponding value will be \code{NA}.
}
\description{
This function searches for steady states in a simulation by analyzing the \eqn{\log(t / (t+1))} of species abundance across generations.
}
\details{
The function computes the logarithmic differences of species abundance to identify stable generations. 
It determines a steady state when the absolute difference in logarithmic values between consecutive generations falls 
below the specified tolerance. This calculation leverages the logarithmic property \eqn{\log\left(\frac{x}{y}\right) = \log(x) - \log(y)} to facilitate the analysis.

Values of zero in the \code{output} matrix are treated as \code{NA} to avoid 
taking the logarithm of zero. If no stable generations are found for a species, the output will reflect this 
with an \code{NA} entry for that species.
}
\examples{
wd = "~/Documents/LAB_ECO/Simulations"
seeds_path <- file.path(wd, "Seeds.tsv" )

# Generate parameters
params <- init_data(N_species = 2, seeds_path, C0 = 0.45, CN = 0.2, Diag_val = -0.5)

# Run simulation
times <- 100  # Define the number of generations
output <- run_simulation(N_species = 2, params = params, times = times)

# Generate unique ID
uniqueID <- forge_id(wd)

# Example usage:
individual_prop_SS(uniqueID, output, tolerance = 0.01, wd)

}
